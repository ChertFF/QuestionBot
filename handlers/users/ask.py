import emoji
import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove
from magic_filter import F
import aiogram.utils.markdown as fmt
from data.config import ADMIN_CHAT_ID
from filters import IsPrivate
from keyboards.inline import city_keyboard, group_keyboard
from loader import dp
from aiogram.dispatcher.filters import Command, Text

from states.ask import Ask


#–ü–æ—Å–ª–µ /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
@dp.callback_query_handler(F.data == 'startVal_–°–ø—Ä–æ—Å–∏—Ç—å', IsPrivate())
async def process_ask_press(callback: types.CallbackQuery):
    await callback.message.answer(f'–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ {emoji.emojize("üîç")}\n'
                         f'–í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–Ω–æ–Ω–∏–º–Ω–æ, —Ç–æ–ª—å–∫–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞ –∏ –æ—Ç–¥–µ–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å {emoji.emojize("ü´∂")}\n')
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å:', reply_markup=city_keyboard)
    logging.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.from_user.id} {callback.message.from_user.full_name} {callback.message.from_user.url} @{callback.message.from_user.username} —Ä–µ—à–∏–ª –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å | –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞')
    await Ask.City.set()


#–î—É–±–ª—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—à–µ, –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(Command("ask"))
async def start_ask_command(message: types.Message):
    await message.answer(f'–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—å—Å—è. {emoji.emojize("üîç")}\n'
                         f'–í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–Ω–æ–Ω–∏–º–Ω–æ, —Ç–æ–ª—å–∫–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞ –∏ –æ—Ç–¥–µ–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å {emoji.emojize("ü´∂")}\n')
    await message.answer(f'–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å:', reply_markup=city_keyboard)
    logging.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.full_name} {message.from_user.url} @{message.from_user.username} —Ä–µ—à–∏–ª –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å | –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞')
    await Ask.City.set()


@dp.callback_query_handler(lambda c: c.data.startswith('cityVal_'), state=Ask.City)
async def process_city_press(callback: types.CallbackQuery, state:FSMContext):
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await dp.bot.delete_message(callback.message.chat.id, callback.message.message_id)
    #–û—Ç—Å–µ–∫–∞–µ–º –≤ –Ω–∞—á–∞–ª–µ cityVal_ –≤ callback, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    city = callback.data.split('_')[1]
    #–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ State, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö –∏–∑ —à–∞–≥–∞ –≤ —à–∞–≥
    await state.update_data(City=city)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    await callback.message.answer(f'–°—É–ø–µ—Ä, —Ç–≤–æ–π –≥–æ—Ä–æ–¥ {data.get("City")}!\n'
                                  f'–û—Å—Ç–∞–ª–æ—Å—å —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–µ—Ç–∞–ª—å.')
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏ –æ—Ç–¥–µ–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å:', reply_markup=group_keyboard)
    logging.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.from_user.id} {callback.message.from_user.full_name} {callback.message.from_user.url} @{callback.message.from_user.username} –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ {city} | –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞')
    await Ask.Group.set()


@dp.callback_query_handler(lambda c: c.data.startswith('groupVal_'), state=Ask.Group)
async def process_group_press(callback: types.CallbackQuery, state:FSMContext):
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await dp.bot.delete_message(callback.message.chat.id, callback.message.message_id)
    #–û—Ç—Å–µ–∫–∞–µ–º –≤ –Ω–∞—á–∞–ª–µ cityVal_ –≤ callback, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    group = callback.data.split('_')[1]
    #–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ State, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö –∏–∑ —à–∞–≥–∞ –≤ —à–∞–≥
    await state.update_data(Group=group)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    await callback.message.answer(f'–û—Ç–ª–∏—á–Ω–æ, —Ç–≤–æ–π –æ—Ç–¥–µ–ª {data.get("Group")}!\n'
                                  f'–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –∑–∞–¥–∞—Ç—å.', reply_markup=ReplyKeyboardRemove())
    logging.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.from_user.id} {callback.message.from_user.full_name} {callback.message.from_user.url} @{callback.message.from_user.username} –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ {group} | –î—É–º–∞–µ—Ç –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º')
    await Ask.Question.set()


@dp.message_handler(content_types=types.ContentType.TEXT,state=Ask.Question)
async def question_text(message: types.Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç–æ–≤
    await state.update_data(Question=message.text)
    data = await state.get_data()
    question = data.get("Question")
    city = data.get("City")
    group = data.get("Group")
    # –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –Ω–∏–∂–µ
    await dp.bot.send_message(ADMIN_CHAT_ID, f'–ü–æ—Å—Ç—É–ø–∏–ª –≤–æ–ø—Ä–æ—Å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!\n'
                                             f'–î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ:\n'
                                             f'–≥–æ—Ä–æ–¥ #{city}, –æ—Ç–¥–µ–ª #{group}\n\n'
                                             f'{question}\n')
    await message.reply("–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω!")
    logging.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.full_name} {message.from_user.url} @{message.from_user.username} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å {message.text}| –ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å')
    await state.finish()


@dp.message_handler(content_types=types.ContentType.PHOTO,state=Ask.Question)
async def question_photo(message: types.Message, state: FSMContext):
    #–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç–æ–≤
    await state.update_data(Question=message.text)
    data = await state.get_data()
    question = data.get("Question")
    city = data.get("City")
    group = data.get("Group")
    #–û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –Ω–∏–∂–µ
    photo = message.photo[-1]
    photo_file = await dp.bot.get_file(photo.file_id)
    await dp.bot.send_message(ADMIN_CHAT_ID, f'–ü–æ—Å—Ç—É–ø–∏–ª –≤–æ–ø—Ä–æ—Å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!\n'
                                             f'–î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ:\n'
                                             f'–≥–æ—Ä–æ–¥ #{city}, –æ—Ç–¥–µ–ª #{group}\n\n'
                                             f'{question}\n')
    await dp.bot.send_photo(ADMIN_CHAT_ID, photo=photo_file.file_id, caption='–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–æ—Ç–æ')
    await message.reply("–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω!")
    logging.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.full_name} {message.from_user.url} @{message.from_user.username} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å c –∫–∞—Ä—Ç–∏–Ω–∫–æ–π {message.text}| –ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å')
    await state.finish()


@dp.message_handler(content_types=types.ContentType.VOICE,state=Ask.Question)
async def question_voice(message: types.Message, state: FSMContext):
    #–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç–æ–≤
    await state.update_data(Question=message.text)
    data = await state.get_data()
    question = data.get("Question")
    city = data.get("City")
    group = data.get("Group")
    #–û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –Ω–∏–∂–µ
    voice = message.voice
    voice_file = await dp.bot.get_file(voice.file_id)
    await dp.bot.send_voice(ADMIN_CHAT_ID, voice=voice_file.file_id, caption= f'–ü–æ—Å—Ç—É–ø–∏–ª –≤–æ–ø—Ä–æ—Å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!\n'
                                                                         f'–î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ:\n'
                                                                         f'–≥–æ—Ä–æ–¥ #{city}, –æ—Ç–¥–µ–ª #{group}\n\n')
    await message.reply("–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω!")
    logging.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.full_name} {message.from_user.url} @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ | –ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å')
    await state.finish()


@dp.message_handler(content_types=types.ContentType.VIDEO_NOTE,state=Ask.Question)
async def question_video_note(message: types.Message, state: FSMContext):
    #–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç–æ–≤
    await state.update_data(Question=message.text)
    data = await state.get_data()
    question = data.get("Question")
    city = data.get("City")
    group = data.get("Group")
    #–û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –Ω–∏–∂–µ
    video_note = message.video_note
    voice_file = await dp.bot.get_file(video_note.file_id)
    await dp.bot.send_voice(ADMIN_CHAT_ID, voice=voice_file.file_id)
    await dp.bot.send_message(ADMIN_CHAT_ID, text=f'–ü–æ—Å—Ç—É–ø–∏–ª –≤–æ–ø—Ä–æ—Å –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!\n'
                                                  f'–î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ:\n'
                                                  f'–≥–æ—Ä–æ–¥ #{city}, –æ—Ç–¥–µ–ª #{group}\n\n')
    await message.reply("–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω!")
    logging.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.full_name} {message.from_user.url} @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫—Ä—É–∂–æ–∫ | –ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å')
    await state.finish()